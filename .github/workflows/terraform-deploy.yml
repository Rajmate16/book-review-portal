name: Terraform Deploy to AWS

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-deploy.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

permissions:
  id-token: write
  contents: read

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Check Terraform Files
      working-directory: ./terraform
      run: |
        if [ ! -d "./terraform" ] || [ -z "$(ls -A ./terraform/*.tf)" ]; then
          echo "Error: No Terraform files found in ./terraform directory"
          exit 1
        fi

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
      continue-on-error: false

    - name: Terraform Format Check
      working-directory: ./terraform
      run: terraform fmt -check
      continue-on-error: false

    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate
      continue-on-error: false

    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan -out=tfplan
      env:
        TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
        TF_VAR_project_name: ${{ vars.PROJECT_NAME }}
        TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      continue-on-error: false

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: ./terraform/tfplan
        retention-days: 5

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: ./terraform

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
      continue-on-error: false

    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve tfplan
      env:
        TF_VAR_environment: production
        TF_VAR_project_name: ${{ vars.PROJECT_NAME }}
        TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      continue-on-error: false

  terraform-destroy:
    name: Terraform Destroy (Manual)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
      continue-on-error: false

    - name: Terraform Destroy
      working-directory: ./terraform
      run: terraform destroy -auto-approve
      env:
        TF_VAR_environment: production
        TF_VAR_project_name: ${{ vars.PROJECT_NAME }}
        TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      continue-on-error: false
