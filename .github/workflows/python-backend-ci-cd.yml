name: Python Backend CI/CDnnon:n  push:n    branches: [ main, develop ]n    paths:n      - 'backend/python-book-service/**'n  pull_request:n    branches: [ main ]n    paths:n      - 'backend/python-book-service/**'nnenv:n  AWS_REGION: us-east-1n  ECR_REPOSITORY: microservices-demo-python-appnnjobs:n  security-scan:n    runs-on: ubuntu-latestn    steps:n    - name: Checkout coden      uses: actions/checkout@v4nn    - name: Set up Pythonn      uses: actions/setup-python@v4n      with:n        python-version: '3.11'nn    - name: Install dependenciesn      run: |n        cd backend/python-book-servicen        python -m pip install --upgrade pipn        pip install -r requirements.txtn        pip install bandit safetynn    - name: Run Bandit Security Scannern      run: |n        cd backend/python-book-servicen        bandit -r . -f json -o bandit-report.json || truen        bandit -r . --severity-level mediumnn    - name: Check for known security vulnerabilitiesn      run: |n        cd backend/python-book-servicen        safety check --json --output safety-report.json || truen        safety checknn    - name: Upload security reportsn      uses: actions/upload-artifact@v3n      if: always()n      with:n        name: security-reports-pythonn        path: |n          backend/python-book-service/bandit-report.jsonn          backend/python-book-service/safety-report.jsonnn  lint-and-test:n    runs-on: ubuntu-latestn    needs: security-scann    services:n      mysql:n        image: mysql:8.0n        env:n          MYSQL_ROOT_PASSWORD: rootpasswordn          MYSQL_DATABASE: books_db_testn          MYSQL_USER: testusern          MYSQL_PASSWORD: testpassn        ports:n          - 3306:3306n        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3nn    steps:n    - name: Checkout coden      uses: actions/checkout@v4nn    - name: Set up Pythonn      uses: actions/setup-python@v4n      with:n        python-version: '3.11'nn    - name: Cache pip dependenciesn      uses: actions/cache@v3n      with:n        path: ~/.cache/pipn        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}n        restore-keys: |n          ${{ runner.os }}-pip-nn    - name: Install dependenciesn      run: |n        cd backend/python-book-servicen        python -m pip install --upgrade pipn        pip install -r requirements.txtnn    - name: Run linting with flake8n      run: |n        cd backend/python-book-servicen        flake8 . --count --select=E9,F63,F7,F82 --show-source --statisticsn        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statisticsnn    - name: Run tests with coveragen      env:n        DATABASE_URL: mysql://testuser:testpass@localhost:3306/books_db_testn      run: |n        cd backend/python-book-servicen        python -m pytest tests/ --cov=. --cov-report=xml --cov-report=html --cov-fail-under=80nn    - name: Upload coverage reportsn      uses: codecov/codecov-action@v3n      with:n        file: backend/python-book-service/coverage.xmln        flags: python-backendn        name: python-backend-coveragenn    - name: Upload test resultsn      uses: actions/upload-artifact@v3n      if: always()n      with:n        name: test-results-pythonn        path: |n          backend/python-book-service/htmlcov/n          backend/python-book-service/coverage.xmlnn  build-and-push:n    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')n    runs-on: ubuntu-latestn    needs: [security-scan, lint-and-test]n    n    steps:n    - name: Checkout coden      uses: actions/checkout@v4nn    - name: Configure AWS credentialsn      uses: aws-actions/configure-aws-credentials@v4n      with:n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}n        aws-region: ${{ env.AWS_REGION }}nn    - name: Login to Amazon ECRn      id: login-ecrn      uses: aws-actions/amazon-ecr-login@v2nn    - name: Build, tag, and push image to Amazon ECRn      env:n        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}n        IMAGE_TAG: ${{ github.sha }}n      run: |n        cd backend/python-book-servicen        n        # Create a simple Dockerfile for Python appn        cat > Dockerfile << 'EOF'n        FROM python:3.11-slimn        n        # Security: Create non-root usern        RUN groupadd -r appgroup && useradd -r -g appgroup appusern        n        WORKDIR /appn        n        # Install system dependenciesn        RUN apt-get update && apt-get install -y n            gcc n            pkg-config n            default-libmysqlclient-dev n            && rm -rf /var/lib/apt/lists/*n        n        # Copy requirements and install dependenciesn        COPY requirements.txt .n        RUN pip install --no-cache-dir -r requirements.txtn        n        # Copy application coden        COPY . .n        n        # Change ownership to non-root usern        RUN chown -R appuser:appgroup /appn        USER appusern        n        # Expose portn        EXPOSE 5000n        n        # Health checkn        HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 n            CMD curl -f http://localhost:5000/api/health || exit 1n        n        # Run applicationn        CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "2", "app:app"]n        EOFn        n        # Build and pushn        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .n        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .n        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAGn        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latestnn    - name: Run Trivy vulnerability scannern      uses: aquasecurity/trivy-action@mastern      with:n        image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}n        format: 'sarif'n        output: 'trivy-results.sarif'nn    - name: Upload Trivy scan results to GitHub Security tabn      uses: github/codeql-action/upload-sarif@v2n      if: always()n      with:n        sarif_file: 'trivy-results.sarif'nn  deploy-to-ec2:n    if: github.ref == 'refs/heads/main'n    runs-on: ubuntu-latestn    needs: build-and-pushn    environment: productionn    n    steps:n    - name: Configure AWS credentialsn      uses: aws-actions/configure-aws-credentials@v4n      with:n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}n        aws-region: ${{ env.AWS_REGION }}nn    - name: Update Auto Scaling Groupn      run: |n        # Trigger instance refresh to deploy new versionn        aws autoscaling start-instance-refresh n          --auto-scaling-group-name microservices-demo-dev-python-asg n          --preferences MinHealthyPercentage=50,InstanceWarmup=300nn    - name: Wait for deployment to completen      run: |n        aws autoscaling wait instance-refresh-successful n          --auto-scaling-group-name microservices-demo-dev-python-asg n          --instance-refresh-id $(aws autoscaling describe-instance-refreshes n            --auto-scaling-group-name microservices-demo-dev-python-asg n            --query 'InstanceRefreshes[0].InstanceRefreshId' --output text)nn    - name: Verify deploymentn      run: |n        # Get ALB DNS name and test health endpointn        ALB_DNS=$(aws elbv2 describe-load-balancers  
          --names microservices-demo-dev-alb  
          --query 'LoadBalancers[0].DNSName' --output text)n        n        echo "Testing health endpoint: http://$ALB_DNS/api/health"n        n        # Wait for ALB to route to new instancesn        sleep 60n        n        # Test health endpointn        for i in {1..10}; don          if curl -f "http://$ALB_DNS/api/health"; thenn            echo "Health check passed"n            breakn          elsen            echo "Health check failed, retrying in 30s..."n            sleep 30n          fin        done