package com.microservices.demo.controller;nnimport com.microservices.demo.entity.Review;nimport com.microservices.demo.service.ReviewService;nimport org.springframework.beans.factory.annotation.Autowired;nimport org.springframework.http.ResponseEntity;nimport org.springframework.web.bind.annotation.*;nnimport jakarta.validation.Valid;nimport java.util.HashMap;nimport java.util.List;nimport java.util.Map;nn@RestControllern@RequestMapping("/api/reviews")n@CrossOrigin(origins = "*")npublic class ReviewController {nn    @Autowiredn    private ReviewService reviewService;nn    @GetMapping("/book/{bookId}")n    public ResponseEntity<Map<String, Object>> getReviewsByBookId(@PathVariable Long bookId) {n        try {n            List<Review> reviews = reviewService.getReviewsByBookId(bookId);n            Double averageRating = reviewService.getAverageRatingByBookId(bookId);n            Long reviewCount = reviewService.getReviewCountByBookId(bookId);nn            Map<String, Object> response = new HashMap<>();n            response.put("reviews", reviews);n            response.put("statistics", Map.of(n                "totalReviews", reviewCount != null ? reviewCount : 0,n                "averageRating", averageRating != null ? averageRating : 0.0n            ));nn            return ResponseEntity.ok(response);n        } catch (Exception e) {n            return ResponseEntity.internalServerError().body(Map.of("error", e.getMessage()));n        }n    }nn    @PostMappingn    public ResponseEntity<Map<String, Object>> createReview(@Valid @RequestBody Review review) {n        try {n            Review savedReview = reviewService.createReview(review);n            return ResponseEntity.ok(Map.of(n                "message", "Review created successfully",n                "review", savedReviewn            ));n        } catch (Exception e) {n            return ResponseEntity.internalServerError().body(Map.of("error", e.getMessage()));n        }n    }nn    @GetMapping("/{id}")n    public ResponseEntity<Review> getReviewById(@PathVariable Long id) {n        return reviewService.getReviewById(id)n                .map(ResponseEntity::ok)n                .orElse(ResponseEntity.notFound().build());n    }nn    @PutMapping("/{id}")n    public ResponseEntity<Map<String, Object>> updateReview(@PathVariable Long id, @Valid @RequestBody Review reviewDetails) {n        try {n            Review updatedReview = reviewService.updateReview(id, reviewDetails);n            return ResponseEntity.ok(Map.of(n                "message", "Review updated successfully",n                "review", updatedReviewn            ));n        } catch (Exception e) {n            return ResponseEntity.internalServerError().body(Map.of("error", e.getMessage()));n        }n    }nn    @DeleteMapping("/{id}")n    public ResponseEntity<Map<String, Object>> deleteReview(@PathVariable Long id) {n        try {n            reviewService.deleteReview(id);n            return ResponseEntity.ok(Map.of("message", "Review deleted successfully"));n        } catch (Exception e) {n            return ResponseEntity.internalServerError().body(Map.of("error", e.getMessage()));n        }n    }nn    @GetMapping("/rating/{rating}")n    public ResponseEntity<Map<String, Object>> getReviewsByRating(@PathVariable Integer rating) {n        try {n            List<Review> reviews = reviewService.getReviewsByRating(rating);n            return ResponseEntity.ok(Map.of(n                "reviews", reviews,n                "rating", rating,n                "count", reviews.size()n            ));n        } catch (Exception e) {n            return ResponseEntity.internalServerError().body(Map.of("error", e.getMessage()));n        }n    }n}