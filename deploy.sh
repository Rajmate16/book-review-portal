#!/bin/bashnn# Book Review Portal Deployment Scriptn# This script automates the deployment of the multi-service applicationnnset -enn# Colors for outputnRED='\033[0;31m'nGREEN='\033[0;32m'nYELLOW='\033[1;33m'nBLUE='\033[0;34m'nNC='\033[0m' # No Colornn# ConfigurationnPROJECT_NAME="book-review-portal"nAWS_REGION="us-east-1"nTERRAFORM_DIR="terraform"nFRONTEND_DIR="frontend/react-book-app"nPYTHON_SERVICE_DIR="backend/python-book-service"nJAVA_SERVICE_DIR="backend/java-review-service"nn# Function to print colored outputnprint_status() {n    echo -e "${BLUE}[INFO]${NC} $1"n}nnprint_success() {n    echo -e "${GREEN}[SUCCESS]${NC} $1"n}nnprint_warning() {n    echo -e "${YELLOW}[WARNING]${NC} $1"n}nnprint_error() {n    echo -e "${RED}[ERROR]${NC} $1"n}nn# Function to check if command existsncommand_exists() {n    command -v "$1" >/dev/null 2>&1n}nn# Function to check prerequisitesncheck_prerequisites() {n    print_status "Checking prerequisites..."n    n    local missing_tools=()n    n    if ! command_exists terraform; thenn        missing_tools+=("terraform")n    fin    n    if ! command_exists aws; thenn        missing_tools+=("aws")n    fin    n    if ! command_exists git; thenn        missing_tools+=("git")n    fin    n    if [ ${#missing_tools[@]} -ne 0 ]; thenn        print_error "Missing required tools: ${missing_tools[*]}"n        print_status "Please install the missing tools and try again."n        exit 1n    fin    n    print_success "All prerequisites are installed."n}nn# Function to setup AWS credentialsnsetup_aws_credentials() {n    print_status "Setting up AWS credentials..."n    n    if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ]; thenn        print_warning "AWS credentials not found in environment variables."n        print_status "Please configure AWS credentials using one of the following methods:"n        print_status "1. Set environment variables: AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY"n        print_status "2. Run: aws configure"n        print_status "3. Use AWS IAM roles if running on EC2"n        n        read -p "Do you want to continue with AWS CLI configuration? (y/n): " -n 1 -rn        echon        if [[ $REPLY =~ ^[Yy]$ ]]; thenn            aws configuren        elsen            print_error "AWS credentials are required for deployment."n            exit 1n        fin    fin    n    print_success "AWS credentials configured."n}nn# Function to create S3 bucket for Terraform statencreate_s3_backend() {n    print_status "Creating S3 bucket for Terraform state..."n    n    local bucket_name="${PROJECT_NAME}-terraform-state"n    n    if aws s3 ls "s3://${bucket_name}" 2>&1 | grep -q "NoSuchBucket"; thenn        aws s3 mb "s3://${bucket_name}" --region "$AWS_REGION"n        aws s3api put-bucket-versioning --bucket "${bucket_name}" --versioning-configuration Status=Enabledn        aws s3api put-bucket-encryption --bucket "${bucket_name}" --server-side-encryption-configuration '{n            "Rules": [n                {n                    "ApplyServerSideEncryptionByDefault": {n                        "SSEAlgorithm": "AES256"n                    }n                }n            ]n        }'n        print_success "S3 bucket created: ${bucket_name}"n    elsen        print_warning "S3 bucket already exists: ${bucket_name}"n    fin}nn# Function to create DynamoDB table for state lockingncreate_dynamodb_table() {n    print_status "Creating DynamoDB table for state locking..."n    n    local table_name="terraform-state-lock"n    n    if ! aws dynamodb describe-table --table-name "$table_name" --region "$AWS_REGION" 2>/dev/null; thenn        aws dynamodb create-table \n            --table-name "$table_name" \n            --attribute-definitions AttributeName=LockID,AttributeType=S \n            --key-schema AttributeName=LockID,KeyType=HASH \n            --billing-mode PAY_PER_REQUEST \n            --region "$AWS_REGION"n        n        print_success "DynamoDB table created: ${table_name}"n    elsen        print_warning "DynamoDB table already exists: ${table_name}"n    fin}nn# Function to setup OIDC providernsetup_oidc_provider() {n    print_status "Setting up OIDC provider for GitHub Actions..."n    n    local provider_arn="arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):oidc-provider/token.actions.githubusercontent.com"n    n    if ! aws iam get-open-id-connect-provider --open-id-connect-provider-arn "$provider_arn" 2>/dev/null; thenn        aws iam create-open-id-connect-provider \n            --url https://token.actions.githubusercontent.com \n            --client-id-list sts.amazonaws.com \n            --thumbprint-list 6938fd4d98bab03faadb97b34396831e3780aea1 \n            --region "$AWS_REGION"n        n        print_success "OIDC provider created"n    elsen        print_warning "OIDC provider already exists"n    fin}nn# Function to create IAM role for GitHub Actionsncreate_iam_role() {n    print_status "Creating IAM role for GitHub Actions..."n    n    local role_name="GitHubActionsOIDCRole"n    local account_id=$(aws sts get-caller-identity --query Account --output text)n    n    # Create trust policyn    cat > aws-oidc-trust-policy.json << EOFn{n  "Version": "2012-10-17",n  "Statement": [n    {n      "Effect": "Allow",n      "Principal": {n        "Federated": "arn:aws:iam::${account_id}:oidc-provider/token.actions.githubusercontent.com"n      },n      "Action": "sts:AssumeRoleWithWebIdentity",n      "Condition": {n        "StringEquals": {n          "token.actions.githubusercontent.com:aud": "sts.amazonaws.com"n        },n        "StringLike": {n          "token.actions.githubusercontent.com:sub": "repo:YOUR_GITHUB_USERNAME/book-review-portal:*"n        }n      }n    }n  ]n}nEOFn    n    if ! aws iam get-role --role-name "$role_name" 2>/dev/null; thenn        aws iam create-role \n            --role-name "$role_name" \n            --assume-role-policy-document file://aws-oidc-trust-policy.jsonn        n        # Attach required policiesn        aws iam attach-role-policy \n            --role-name "$role_name" \n            --policy-arn arn:aws:aws:policy/AdministratorAccessn        n        print_success "IAM role created: ${role_name}"n    elsen        print_warning "IAM role already exists: ${role_name}"n    fin}nn# Function to initialize Terraformninitialize_terraform() {n    print_status "Initializing Terraform..."n    n    cd "$TERRAFORM_DIR"n    n    if [ -d ".terraform" ]; thenn        print_warning "Terraform already initialized. Reinitializing..."n        terraform init -reconfiguren    elsen        terraform initn    fin    n    print_success "Terraform initialized successfully."n}nn# Function to plan Terraform deploymentnplan_terraform() {n    print_status "Planning Terraform deployment..."n    n    terraform plan -out=tfplann    n    if [ $? -eq 0 ]; thenn        print_success "Terraform plan completed successfully."n    elsen        print_error "Terraform plan failed."n        exit 1n    fin}nn# Function to apply Terraform deploymentnapply_terraform() {n    print_status "Applying Terraform deployment..."n    n    terraform apply tfplann    n    if [ $? -eq 0 ]; thenn        print_success "Terraform deployment completed successfully."n    elsen        print_error "Terraform deployment failed."n        exit 1n    fin}nn# Function to build and deploy frontendnbuild_frontend() {n    print_status "Building frontend application..."n    n    cd "../$FRONTEND_DIR"n    n    if [ ! -d "node_modules" ]; thenn        npm installn    fin    n    npm run buildn    n    if [ $? -eq 0 ]; thenn        print_success "Frontend build completed successfully."n    elsen        print_error "Frontend build failed."n        exit 1n    fin}nn# Function to deploy frontend to S3ndeploy_frontend() {n    print_status "Deploying frontend to S3..."n    n    local bucket_name="${PROJECT_NAME}-frontend"n    n    # Get bucket name from Terraform outputn    cd "../$TERRAFORM_DIR"n    local bucket_name=$(terraform output -raw frontend_bucket_name 2>/dev/null || echo "${PROJECT_NAME}-frontend")n    n    aws s3 sync build/ "s3://${bucket_name}" --deleten    n    if [ $? -eq 0 ]; thenn        print_success "Frontend deployed to S3 successfully."n    elsen        print_error "Frontend deployment failed."n        exit 1n    fin}nn# Function to setup Python virtual environmentnsetup_python_env() {n    print_status "Setting up Python virtual environment..."n    n    cd "../$PYTHON_SERVICE_DIR"n    n    if [ ! -d "venv" ]; thenn        python3 -m venv venvn    fin    n    source venv/bin/activaten    pip install -r requirements.txtn    n    print_success "Python virtual environment setup completed."n}nn# Function to setup Java environmentnsetup_java_env() {n    print_status "Setting up Java environment..."n    n    cd "../$JAVA_SERVICE_DIR"n    n    if ! command_exists mvn; thenn        print_error "Maven is not installed. Please install Maven and try again."n        exit 1n    fin    n    print_success "Java environment setup completed."n}nn# Function to run testsnrun_tests() {n    print_status "Running tests..."n    n    # Frontend testsn    cd "../$FRONTEND_DIR"n    npm test -- --watchAll=falsen    n    # Python testsn    cd "../$PYTHON_SERVICE_DIR"n    source venv/bin/activaten    python -m pytestn    n    # Java testsn    cd "../$JAVA_SERVICE_DIR"n    mvn testn    n    print_success "All tests completed successfully."n}nn# Function to cleanupncleanup() {n    print_status "Cleaning up temporary files..."n    n    if [ -f "tfplan" ]; thenn        rm tfplann    fin    n    if [ -f "aws-oidc-trust-policy.json" ]; thenn        rm aws-oidc-trust-policy.jsonn    fin    n    print_success "Cleanup completed."n}nn# Function to display helpnshow_help() {n    echo "Usage: $0 [OPTION]"n    echon    echo "Options:"n    echo "  setup     - Setup AWS infrastructure and OIDC"n    echo "  plan      - Plan Terraform deployment"n    echo "  apply     - Apply Terraform deployment"n    echo "  destroy   - Destroy Terraform infrastructure"n    echo "  frontend  - Build and deploy frontend"n    echo "  test      - Run all tests"n    echo "  help      - Show this help message"n    echon    echo "Examples:"n    echo "  $0 setup     # Setup AWS infrastructure"n    echo "  $0 plan      # Plan deployment"n    echo "  $0 apply     # Deploy infrastructure"n    echo "  $0 destroy   # Remove infrastructure"n}nn# Main executionnmain() {n    case "${1:-help}" inn        "setup")n            check_prerequisitesn            setup_aws_credentialsn            create_s3_backendn            create_dynamodb_tablen            setup_oidc_providern            create_iam_rolen            initialize_terraformn            print_success "Setup completed successfully!"n            ;;n        "plan")n            check_prerequisitesn            setup_aws_credentialsn            initialize_terraformn            plan_terraformn            ;;n        "apply")n            check_prerequisitesn            setup_aws_credentialsn            initialize_terraformn            plan_terraformn            apply_terraformn            cleanupn            ;;n        "destroy")n            check_prerequisitesn            setup_aws_credentialsn            initialize_terraformn            terraform destroy -auto-approven            cleanupn            ;;n        "frontend")n            build_frontendn            deploy_frontendn            ;;n        "test")n            run_testsn            ;;n        "help"|*)n            show_helpn            ;;n    esacn}nn# Execute main functionnmain "$@"n