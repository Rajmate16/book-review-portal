resource "aws_s3_bucket" "frontend" {n  bucket = "${var.project_name}-${var.environment}-frontend"nn  tags = {n    Name = "${var.project_name}-${var.environment}-frontend-bucket"n  }n}nnresource "aws_s3_bucket_public_access_block" "frontend" {n  bucket = aws_s3_bucket.frontend.idnn  block_public_acls       = truen  block_public_policy     = truen  ignore_public_acls      = truen  restrict_public_buckets = truen}nnresource "aws_s3_bucket_policy" "frontend" {n  bucket = aws_s3_bucket.frontend.idnn  policy = jsonencode({n    Version = "2012-10-17"n    Statement = [n      {n        Sid       = "PublicReadGetObject"n        Effect     = "Allow"n        Principal  = "*"n        Action     = "s3:GetObject"n        Resource   = "${aws_s3_bucket.frontend.arn}/*"n        Condition = {n          StringEquals = {n            "AWS:SourceArn" = aws_cloudfront_distribution.frontend.arnn          }n        }n      }n    ]n  })n}nnresource "aws_s3_bucket_website_configuration" "frontend" {n  bucket = aws_s3_bucket.frontend.idnn  index_document {n    suffix = "index.html"n  }nn  error_document {n    key = "index.html"n  }n}nnresource "aws_s3_bucket_versioning" "frontend" {n  bucket = aws_s3_bucket.frontend.idn  versioning_configuration {n    status = "Enabled"n  }n}nnresource "aws_s3_bucket_lifecycle_configuration" "frontend" {n  bucket = aws_s3_bucket.frontend.idnn  rule {n    id     = "delete_old_versions"n    status = "Enabled"nn    filter {n      prefix = ""n    }nn    noncurrent_version_expiration {n      noncurrent_days = 30n    }n  }n}nn# CloudFront distribution for frontendnnresource "aws_cloudfront_distribution" "frontend" {n  enabled             = truen  is_ipv6_enabled    = truen  default_root_object = "index.html"n  price_class         = "PriceClass_100"nn  origin {n    domain_name = aws_s3_bucket.frontend.bucket_regional_domain_namen    origin_id   = aws_s3_bucket.frontend.idnn    s3_origin_config {n      origin_access_identity = aws_cloudfront_origin_access_identity.frontend.cloudfront_access_identity_pathn    }n  }nn  default_cache_behavior {n    allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]n    cached_methods   = ["GET", "HEAD"]n    target_origin_id = aws_s3_bucket.frontend.idnn    forwarded_values {n      query_string = falsen      cookies {n        forward = "none"n      }n    }nn    viewer_protocol_policy = "redirect-to-https"n    min_ttl                = 0n    default_ttl            = 3600n    max_ttl                = 86400n  }nn  # Handle SPA routingn  custom_error_response {n    error_code         = 403n    response_code      = 200n    response_page_path = "/index.html"n  }nn  custom_error_response {n    error_code         = 404n    response_code      = 200n    response_page_path = "/index.html"n  }nn  restrictions {n    geo_restriction {n      restriction_type = "none"n    }n  }nn  viewer_certificate {n    cloudfront_default_certificate = truen    minimum_protocol_version      = "TLSv1.2_2021"n  }nn  tags = {n    Name = "${var.project_name}-${var.environment}-cloudfront"n  }n}nnresource "aws_cloudfront_origin_access_identity" "frontend" {n  comment = "OAI for ${var.project_name}-${var.environment}-frontend"n}nn# Update S3 bucket policy to allow CloudFront accessnnresource "aws_s3_bucket_policy" "frontend_updated" {n  bucket = aws_s3_bucket.frontend.idnn  policy = jsonencode({n    Version = "2012-10-17"n    Statement = [n      {n        Sid       = "CloudFrontAccess"n        Effect     = "Allow"n        Principal  = {n          AWS = aws_cloudfront_origin_access_identity.frontend.iam_arnn        }n        Action     = "s3:GetObject"n        Resource   = "${aws_s3_bucket.frontend.arn}/*"n      }n    ]n  })n}nn# S3 bucket for Terraform state (if not exists)nnresource "aws_s3_bucket" "terraform_state" {n  bucket = "${var.project_name}-terraform-state"nn  tags = {n    Name = "${var.project_name}-terraform-state"n  }n}nnresource "aws_s3_bucket_versioning" "terraform_state" {n  bucket = aws_s3_bucket.terraform_state.idn  versioning_configuration {n    status = "Enabled"n  }n}nnresource "aws_s3_bucket_server_side_encryption_configuration" "terraform_state" {n  bucket = aws_s3_bucket.terraform_state.idnn  rule {n    apply_server_side_encryption_by_default {n      sse_algorithm = "AES256"n    }n  }n}nnresource "aws_s3_bucket_public_access_block" "terraform_state" {n  bucket = aws_s3_bucket.terraform_state.idnn  block_public_acls       = truen  block_public_policy     = truen  ignore_public_acls      = truen  restrict_public_buckets = truen}