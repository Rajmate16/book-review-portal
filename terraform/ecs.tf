resource "aws_ecs_cluster" "main" {n  name = "${var.project_name}-${var.environment}-cluster"nn  setting {n    name  = "containerInsights"n    value = "enabled"n  }nn  tags = {n    Name = "${var.project_name}-${var.environment}-cluster"n  }n}nnresource "aws_ecs_task_definition" "python_service" {n  family                   = "${var.project_name}-${var.environment}-python-service"n  network_mode             = "awsvpc"n  requires_compatibilities = ["FARGATE"]n  cpu                     = 256n  memory                  = 512n  execution_role_arn       = aws_iam_role.ecs_execution_role.arnn  task_role_arn           = aws_iam_role.ecs_task_role.arnnn  container_definitions = jsonencode([n    {n      name  = "python-service"n      image = "${var.project_name}-${var.environment}-python-service:latest"n      portMappings = [n        {n          containerPort = 5000n          protocol      = "tcp"n        }n      ]n      environment = [n        {n          name  = "JAVA_SERVICE_URL"n          value = "http://${aws_lb.main.dns_name}"n        }n      ]n      logConfiguration = {n        logDriver = "awslogs"n        options = {n          awslogs-group         = "/ecs/${var.project_name}-${var.environment}-python-service"n          awslogs-region        = var.aws_regionn          awslogs-stream-prefix = "ecs"n        }n      }n    }n  ])nn  tags = {n    Name = "${var.project_name}-${var.environment}-python-task"n  }n}nnresource "aws_ecs_task_definition" "java_service" {n  family                   = "${var.project_name}-${var.environment}-java-service"n  network_mode             = "awsvpc"n  requires_compatibilities = ["FARGATE"]n  cpu                     = 512n  memory                  = 1024n  execution_role_arn       = aws_iam_role.ecs_execution_role.arnn  task_role_arn           = aws_iam_role.ecs_task_role.arnnn  container_definitions = jsonencode([n    {n      name  = "java-service"n      image = "${var.project_name}-${var.environment}-java-service:latest"n      portMappings = [n        {n          containerPort = 8080n          protocol      = "tcp"n        }n      ]n      environment = [n        {n          name  = "SPRING_PROFILES_ACTIVE"n          value = "prod"n        },n        {n          name  = "DB_HOST"n          value = aws_db_instance.main.endpointn        },n        {n          name  = "DB_NAME"n          value = "${var.project_name}_db"n        }n      ]n      secrets = [n        {n          name      = "DB_USERNAME"n          valueFrom = aws_secretsmanager_secret.db_credentials.arnn        },n        {n          name      = "DB_PASSWORD"n          valueFrom = aws_secretsmanager_secret.db_credentials.arnn        }n      ]n      logConfiguration = {n        logDriver = "awslogs"n        options = {n          awslogs-group         = "/ecs/${var.project_name}-${var.environment}-java-service"n          awslogs-region        = var.aws_regionn          awslogs-stream-prefix = "ecs"n        }n      }n    }n  ])nn  tags = {n    Name = "${var.project_name}-${var.environment}-java-task"n  }n}nnresource "aws_ecs_service" "python_service" {n  name            = "${var.project_name}-${var.environment}-python-service"n  cluster         = aws_ecs_cluster.main.idn  task_definition = aws_ecs_task_definition.python_service.arnn  desired_count   = 2n  launch_type     = "FARGATE"nn  network_configuration {n    security_groups  = [aws_security_group.ecs.id]n    subnets          = module.vpc.private_subnetsn    assign_public_ip = falsen  }nn  load_balancer {n    target_group_arn = aws_lb_target_group.python_service.arnn    container_name   = "python-service"n    container_port   = 5000n  }nn  depends_on = [aws_lb_listener.python_service]nn  tags = {n    Name = "${var.project_name}-${var.environment}-python-service"n  }n}nnresource "aws_ecs_service" "java_service" {n  name            = "${var.project_name}-${var.environment}-java-service"n  cluster         = aws_ecs_cluster.main.idn  task_definition = aws_ecs_task_definition.java_service.arnn  desired_count   = 2n  launch_type     = "FARGATE"nn  network_configuration {n    security_groups  = [aws_security_group.ecs.id]n    subnets          = module.vpc.private_subnetsn    assign_public_ip = falsen  }nn  load_balancer {n    target_group_arn = aws_lb_target_group.java_service.arnn    container_name   = "java-service"n    container_port   = 8080n  }nn  depends_on = [aws_lb_listener.python_service]nn  tags = {n    Name = "${var.project_name}-${var.environment}-java-service"n  }n}nn# IAM roles for ECSnnresource "aws_iam_role" "ecs_execution_role" {n  name = "${var.project_name}-${var.environment}-ecs-execution-role"nn  assume_role_policy = jsonencode({n    Version = "2012-10-17"n    Statement = [n      {n        Action = "sts:AssumeRole"n        Effect = "Allow"n        Principal = {n          Service = "ecs-tasks.amazonaws.com"n        }n      }n    ]n  })n}nnresource "aws_iam_role_policy_attachment" "ecs_execution_role_policy" {n  role       = aws_iam_role.ecs_execution_role.namen  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"n}nnresource "aws_iam_role" "ecs_task_role" {n  name = "${var.project_name}-${var.environment}-ecs-task-role"nn  assume_role_policy = jsonencode({n    Version = "2012-10-17"n    Statement = [n      {n        Action = "sts:AssumeRole"n        Effect = "Allow"n        Principal = {n          Service = "ecs-tasks.amazonaws.com"n        }n      }n    ]n  })n}nnresource "aws_iam_role_policy" "ecs_task_role_policy" {n  name = "${var.project_name}-${var.environment}-ecs-task-policy"n  role = aws_iam_role.ecs_task_role.idnn  policy = jsonencode({n    Version = "2012-10-17"n    Statement = [n      {n        Effect = "Allow"n        Action = [n          "secretsmanager:GetSecretValue"n        ]n        Resource = [n          aws_secretsmanager_secret.db_credentials.arnn        ]n      }n    ]n  })n}nn# CloudWatch Log Groupsnnresource "aws_cloudwatch_log_group" "python_service" {n  name              = "/ecs/${var.project_name}-${var.environment}-python-service"n  retention_in_days = 7nn  tags = {n    Name = "${var.project_name}-${var.environment}-python-logs"n  }n}nnresource "aws_cloudwatch_log_group" "java_service" {n  name              = "/ecs/${var.project_name}-${var.environment}-java-service"n  retention_in_days = 7nn  tags = {n    Name = "${var.project_name}-${var.environment}-java-logs"n  }n}