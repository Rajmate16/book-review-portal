import React, { useState, useEffect } from 'react';nimport { useParams, useNavigate, Link } from 'react-router-dom';nimport { bookService, reviewService } from '../services/api';nimport toast from 'react-hot-toast';nnconst AddReview = () => {n  const { id } = useParams();n  const navigate = useNavigate();n  const [book, setBook] = useState(null);n  const [formData, setFormData] = useState({n    reviewer_name: '',n    rating: 5,n    comment: ''n  });n  const [loading, setLoading] = useState(false);n  const [errors, setErrors] = useState({});nn  useEffect(() => {n    fetchBookDetails();n  }, [id]);nn  const fetchBookDetails = async () => {n    try {n      const bookData = await bookService.getBook(id);n      setBook(bookData);n    } catch (error) {n      toast.error('Failed to fetch book details: ' + error.message);n      navigate('/books');n    }n  };nn  const handleChange = (e) => {n    const { name, value } = e.target;n    setFormData(prev => ({n      ...prev,n      [name]: valuen    }));n    n    // Clear error when user starts typingn    if (errors[name]) {n      setErrors(prev => ({n        ...prev,n        [name]: ''n      }));n    }n  };nn  const validateForm = () => {n    const newErrors = {};n    n    if (!formData.reviewer_name.trim()) {n      newErrors.reviewer_name = 'Reviewer name is required';n    }n    n    if (!formData.comment.trim()) {n      newErrors.comment = 'Review comment is required';n    }n    n    if (formData.rating < 1 || formData.rating > 5) {n      newErrors.rating = 'Rating must be between 1 and 5';n    }n    n    setErrors(newErrors);n    return Object.keys(newErrors).length === 0;n  };nn  const handleSubmit = async (e) => {n    e.preventDefault();n    n    if (!validateForm()) {n      return;n    }nn    setLoading(true);n    n    try {n      const reviewData = {n        book_id: parseInt(id),n        reviewer_name: formData.reviewer_name.trim(),n        rating: parseInt(formData.rating),n        comment: formData.comment.trim()n      };n      n      await reviewService.createReview(reviewData);n      toast.success('Review added successfully!');n      navigate(`/books/${id}`);n    } catch (error) {n      toast.error('Failed to add review: ' + error.message);n    } finally {n      setLoading(false);n    }n  };nn  const renderStars = (rating) => {n    return '⭐'.repeat(rating) + '☆'.repeat(5 - rating);n  };nn  if (!book) {n    return (n      <div className="container">n        <div className="loading">Loading book details...</div>n      </div>n    );n  }nn  return (n    <div className="container">n      <div className="form-page">n        <div className="form-header">n          <Link to={`/books/${id}`} className="btn btn-outline">n            ← Back to Bookn          </Link>n          <h1>✍️ Add Review</h1>n        </div>nn        <div className="book-info-summary">n          <h3>{book.title}</h3>n          <p>by {book.author}</p>n        </div>nn        <form onSubmit={handleSubmit} className="review-form">n          <div className="form-group">n            <label htmlFor="reviewer_name">n              Your Name *n            </label>n            <inputn              type="text"n              id="reviewer_name"n              name="reviewer_name"n              value={formData.reviewer_name}n              onChange={handleChange}n              placeholder="Enter your name"n              className={errors.reviewer_name ? 'form-control error' : 'form-control'}n              disabled={loading}n            />n            {errors.reviewer_name && <span className="error-message">{errors.reviewer_name}</span>}n          </div>nn          <div className="form-group">n            <label htmlFor="rating">n              Rating *n            </label>n            <div className="rating-input">n              <selectn                id="rating"n                name="rating"n                value={formData.rating}n                onChange={handleChange}n                className={errors.rating ? 'form-control error' : 'form-control'}n                disabled={loading}n              >n                <option value={5}>5 Stars - Excellent</option>n                <option value={4}>4 Stars - Very Good</option>n                <option value={3}>3 Stars - Good</option>n                <option value={2}>2 Stars - Fair</option>n                <option value={1}>1 Star - Poor</option>n              </select>n              <span className="star-preview">{renderStars(formData.rating)}</span>n            </div>n            {errors.rating && <span className="error-message">{errors.rating}</span>}n          </div>nn          <div className="form-group">n            <label htmlFor="comment">n              Review Comment *n            </label>n            <textarean              id="comment"n              name="comment"n              value={formData.comment}n              onChange={handleChange}n              placeholder="Share your thoughts about this book..."n              className={errors.comment ? 'form-control error' : 'form-control'}n              disabled={loading}n              rows={6}n            />n            {errors.comment && <span className="error-message">{errors.comment}</span>}n            <small className="form-hint">n              Tell others what you liked or didn't like about this bookn            </small>n          </div>nn          <div className="form-actions">n            <buttonn              type="button"n              onClick={() => navigate(`/books/${id}`)}n              className="btn btn-outline"n              disabled={loading}n            >n              Canceln            </button>n            <buttonn              type="submit"n              className="btn btn-primary"n              disabled={loading}n            >n              {loading ? 'Adding Review...' : 'Add Review'}n            </button>n          </div>n        </form>n      </div>n    </div>n  );n};nnexport default AddReview;